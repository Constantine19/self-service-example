name: Apply Terraform Resource

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch:
    inputs:
      port_run_identifier:
        type: string
        required: true
      bucket_name:
        type: string
        required: true
      port_context:
        required: true
        description: >-
          Port's payload, including details for who triggered the action and
          general context (blueprint, run id, etc...)
jobs:
  apply-terraform-resource:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Log starting of cloud resource creation 
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: |
              üöÄ Applying terraform configuration that was approved in run: ${{ github.event.inputs.port_run_identifier }}
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-session-token: '${{ secrets.AWS_SESSION_TOKEN }}'
          aws-region: '${{ secrets.AWS_REGION }}'


    #   - name: Download Terraform plan artifact from the previous workflow run
    #     run: |          
    #       mkdir terraform-artifact
    #       cd terraform-artifact
    #       # Get the artifact download URL by name
    #       artifact_url=$(curl -sSL \
    #         -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN }}" \
    #         -H "Accept: application/vnd.github.v3+json" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
    #         | jq -r --arg artifact_name "tfplan-${{ github.event.inputs.port_run_identifier }}" \
    #         '.artifacts[] | select(.name == $artifact_name) | .archive_download_url')
          
    #       if [ "$artifact_url" == "null" ] || [ -z "$artifact_url" ]; then
    #         echo "‚ùå Terraform plan artifact not found for run: ${{ github.event.inputs.port_run_identifier }}"
    #         exit 1
    #       fi
          
    #       # Download and extract the artifact
    #       curl -sSL -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN }}" \
    #         -o terraform-artifact.zip "$artifact_url"
            
    #       if [ $? -ne 0 ]; then
    #         echo "‚ùå Failed to download artifact. Exiting."
    #         exit 1
    #       fi
          
    #       unzip -qq terraform-artifact.zip
    #       if [ $? -ne 0 ]; then
    #         echo "‚ùå Failed to extract artifact. Exiting."
    #         exit 1
    #       fi

      - name: List artifacts (first 100)
        run: |
            curl -fsSL \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" \
            | jq -r '.artifacts[].name'

      - name: Wait for and download Terraform plan artifact
        env:
            ART_NAME: tfplan-${{ github.event.inputs.port_run_identifier }}
        run: |
            set -euo pipefail
            mkdir -p terraform-artifact
            cd terraform-artifact

            # wait up to ~5 minutes (30 x 10s) for the artifact to appear
            for i in {1..30}; do
                artifact_url=$(curl -fsSL \
                -H "Authorization: Bearer ${{ github.token }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" \
                | jq -r --arg name "$ART_NAME" '.artifacts[] | select(.name==$name) | .archive_download_url' | head -n1)

                if [ -n "$artifact_url" ] && [ "$artifact_url" != "null" ]; then
                echo "Found artifact: $ART_NAME"
                curl -fsSL -H "Authorization: Bearer ${{ github.token }}" -o artifact.zip "$artifact_url"
                unzip -qq artifact.zip
                break
                fi

                echo "Artifact not ready yet, retrying... ($i/30)"
                sleep 10
            done

            test -f tfplan-* || { echo "‚ùå Artifact never appeared."; exit 1; }
            ls -la  
      - name: List contents of working directory
        run: ls -la terraform-artifact
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Make provider binary executable
        run: |
          cd terraform-artifact
          chmod +x .terraform/providers/registry.terraform.io/hashicorp/aws/5.42.0/linux_amd64/terraform-provider-aws_v5.42.0_x5

      - name: Terraform apply resource
        id:   tf-apply
        run: |
          cd terraform-artifact
          terraform apply tfplan-${{ github.event.inputs.port_run_identifier }}
          
      - name: Update Port on status of applying terraform resource (success)
        uses: port-labs/port-github-action@v1
        if: ${{steps.tf-apply.outcome == 'success'}}
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: |
              ‚úÖ Cloud resource successfully provisioned and available in AWS!

      - name: Get current timestamp
        id: timestamp
        run: echo "::set-output name=current_time::$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')"

      - name: Create cloud resource in Port
        uses: port-labs/port-github-action@v1
        if: ${{steps.tf-apply.outcome == 'success'}}
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ github.event.inputs.bucket_name }}
          blueprint: cloudResource
          properties: |-
            {
              "type": "storage",
              "provider": "AWS",
              "region": "${{ secrets.AWS_REGION }}",
              "link": "https://s3.console.aws.amazon.com/s3/buckets/${{ github.event.inputs.bucket_name }}",
              "created_at": "${{ steps.timestamp.outputs.current_time }}"
            }

      - name: Update Port on status of applying terraform resource (failure)
        uses: port-labs/port-github-action@v1
        if: ${{steps.tf-apply.outcome != 'success'}}
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: |
              ‚ùå Cloud resource could not be provisioned. Please check the workflow logs for details.